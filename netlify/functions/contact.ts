import type { Handler } from '@netlify/functions';
import { Resend } from 'resend';
import { z } from 'zod';
import sanitizeHtml from 'sanitize-html';
import crypto from 'crypto';
import { Redis } from '@upstash/redis';

// --- ENV VARS REQUIRED ---
// RESEND_API_KEY
// FROM_EMAIL              e.g. "no-reply@yourdomain.com"
// INTERNAL_TO             e.g. "info@zakariaconcepts.com"
// REDIS_URL               (Upstash Redis REST URL)
// REDIS_TOKEN             (Upstash Redis REST TOKEN)

const resend = new Resend(process.env.RESEND_API_KEY || '');
const redis = new Redis({
  url: process.env.REDIS_URL || '',
  token: process.env.REDIS_TOKEN || ''
});

const schema = z.object({
  name: z.string().min(2).max(120),
  email: z.string().email().max(200),
  company: z.string().max(160).optional().nullable(),
  sector: z.string().max(80).optional().nullable(),
  message: z.string().min(10).max(4000),
});

// normalize + sanitize defensively
function clean(input: string) {
  return sanitizeHtml(input, {
    allowedTags: [],
    allowedAttributes: {},
    textFilter: (text) => text.trim()
  }).slice(0, 4000);
}

function normalize(v?: string | null) {
  return v ? clean(v) : '';
}

const FIVE_HOURS_SECONDS = 5 * 60 * 60;

export const handler: Handler = async (event) => {
  if (event.httpMethod !== 'POST') {
    return {
      statusCode: 405,
      body: JSON.stringify({ ok: false, error: 'Method not allowed' })
    };
  }

  try {
    const data = JSON.parse(event.body || '{}');

    const parsed = schema.safeParse({
      name: normalize(data.name),
      email: normalize(data.email).toLowerCase(),
      company: normalize(data.company),
      sector: normalize(data.sector),
      message: clean(data.message),
    });

    if (!parsed.success) {
      return {
        statusCode: 400,
        body: JSON.stringify({ ok: false, error: 'Invalid input', details: parsed.error.flatten() })
      };
    }

    const { name, email, company, sector, message } = parsed.data;

    // Dedup key: hash of (email + normalized message)
    const keyBase = `${email}::${message}`;
    const hash = crypto.createHash('sha256').update(keyBase).digest('hex');
    const redisKey = `contact_dedupe:${hash}`;

    const already = await redis.get(redisKey);
    if (already) {
      return {
        statusCode: 202,
        body: JSON.stringify({
          ok: true,
          deduped: true,
          message: 'Duplicate message detected within 5 hours; not re-sent.'
        })
      };
    }

    // Compose emails
    const FROM = process.env.FROM_EMAIL!;
    const INTERNAL_TO = process.env.INTERNAL_TO!;

    // 1) Confirmation to the sender
    const confirmationHtml = `
      <div style="font-family:Arial,sans-serif;line-height:1.6">
        <h2 style="margin:0 0 8px">Thanks for contacting Zakaria Concepts, ${name}!</h2>
        <p>We’ve received your message and will get back to you shortly.</p>
        <hr style="border:none;border-top:1px solid #eee;margin:16px 0" />
        <p style="margin:0 0 6px"><strong>Summary</strong></p>
        <p style="margin:0"><strong>Name:</strong> ${name}</p>
        <p style="margin:0"><strong>Email:</strong> ${email}</p>
        ${company ? `<p style="margin:0"><strong>Company:</strong> ${company}</p>` : ''}
        ${sector ? `<p style="margin:0 0 8px"><strong>Sector:</strong> ${sector}</p>` : ''}
        <p style="white-space:pre-wrap"><strong>Message:</strong>\n${message}</p>
        <p style="margin-top:16px">– Zakaria Concepts Team</p>
      </div>
    `;

    // 2) Internal notification
    const internalHtml = `
      <div style="font-family:Arial,sans-serif;line-height:1.6">
        <h2 style="margin:0 0 8px">New Contact Form Submission</h2>
        <p><strong>Name:</strong> ${name}</p>
        <p><strong>Email:</strong> ${email}</p>
        ${company ? `<p><strong>Company:</strong> ${company}</p>` : ''}
        ${sector ? `<p><strong>Sector:</strong> ${sector}</p>` : ''}
        <p style="white-space:pre-wrap"><strong>Message:</strong>\n${message}</p>
        <hr />
        <p style="color:#999;font-size:12px">This email was generated by the website contact form.</p>
      </div>
    `;

    // send both, fail-fast if any error
    await resend.emails.send({
      from: FROM,
      to: email,
      subject: 'We received your message — Zakaria Concepts',
      html: confirmationHtml,
    });

    await resend.emails.send({
      from: FROM,
      to: process.env.INTERNAL_TO!,
      subject: `New Contact — ${name} (${email})`,
      html: internalHtml,
      replyTo: email, // handy
    });

    // set dedupe TTL 5h
    await redis.set(redisKey, '1', { ex: FIVE_HOURS_SECONDS });

    return {
      statusCode: 200,
      body: JSON.stringify({ ok: true })
    };
  } catch (err: any) {
    console.error('CONTACT_ERROR', err?.message || err);
    return {
      statusCode: 500,
      body: JSON.stringify({ ok: false, error: 'Server error' })
    };
  }
};
